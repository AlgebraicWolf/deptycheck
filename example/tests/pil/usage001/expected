1/3: Building Common (Common.idr)
2/3: Building Positive (Positive.idr)
3/3: Building Negative (Negative.idr)
Error: While processing right hand side of bad_for. When unifying:
    Type'
and:
    ?b -> ?c
Mismatch between: Type' and ?b -> ?c.

Negative:11:19--11:23
 07 | 
 08 | --- Example statements ---
 09 | 
 10 | bad_for : Statement vars regs vars regs
 11 | bad_for = for (do Int'. "x" #= C 0; Int'. "y" #= C 0)
                        ^^^^

Error: While processing right hand side of bad_read_reg_base. Can't find an implementation for IsJust (index (with block in fromInteger 4 1 (integerToFin 1 4) ItIsJust) (Base [Nothing, Nothing, Just Int', Nothing])).

Negative:20:17--20:20
 16 | -- Registers-related --
 17 | 
 18 | bad_read_reg_base : Statement vars (Base [Nothing, Nothing, Just Int', Nothing]) vars (Base [Nothing, Nothing, Just Int', Nothing])
 19 | bad_read_reg_base = block $ do
 20 |   Int'. "x" !#= R 1
                      ^^^

Error: While processing right hand side of bad_read_reg_undef_with. Can't find an implementation for IsJust (index (with block in fromInteger 4 2 (integerToFin 2 4) ItIsJust) (With AllUndefined (FS (FS (FS FZ)), Just Int'))).

Negative:25:17--25:20
 21 | 
 22 | bad_read_reg_undef_with : Statement vars (AllUndefined {rc=4} `With` (3, Just Int'))
 23 |                                     vars (AllUndefined {rc=4} `With` (3, Just Int'))
 24 | bad_read_reg_undef_with = block $ do
 25 |   Int'. "x" !#= R 2
                      ^^^

Error: While processing right hand side of bad_read_reg_with. Can't find an implementation for IsJust (index (with block in fromInteger 5 2 (integerToFin 2 5) ItIsJust) (With regs (FS (FS (FS FZ)), Just Int'))).

Negative:29:17--29:20
 25 |   Int'. "x" !#= R 2
 26 | 
 27 | bad_read_reg_with : {0 regs : Registers 5} -> Statement vars (regs `With` (3, Just Int')) vars (regs `With` (3, Just Int'))
 28 | bad_read_reg_with = block $ do
 29 |   Int'. "x" !#= R 2 + C 0
                      ^^^

Error: While processing right hand side of bad_registers_ass. Can't find an implementation for IsJust (integerToFin 6 5).

Negative:34:3--34:4
 30 | 
 31 | bad_registers_ass : {0 regs : Registers 5} -> Statement vars regs vars $ regs `With` (3, Just Int')
 32 | bad_registers_ass = block $ do
 33 |   Int'. "x" !#= C 0
 34 |   6 %= V "x"
        ^

