1/3: Building AlternativeCore (AlternativeCore.idr)
2/3: Building PrintDerivation (PrintDerivation.idr)
3/3: Building DerivedGen (DerivedGen.idr)
LOG gen.auto.derive.infra:0: type: (arg : Fuel) -> (f : X) -> Gen MaybeEmpty (u : () ** Y u f)
LOG gen.auto.derive.infra:0: 
ILam.  (MW ExplicitArg ^outmost-fuel^ : IVar Data.Fuel.Fuel)
    => (MW ExplicitArg outer^<f> : Implicit True)
    => ILocal (IApp. IVar <DerivedGen.Y>[1]
                   $ IVar ^outmost-fuel^
                   $ IVar outer^<f>)
         IClaim MW
                Export
                []
                (MkTy <DerivedGen.Y>[1]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (MW ExplicitArg {arg:1} : IVar DerivedGen.X)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                  $ (IApp. IVar Builtin.DPair.DPair
                                         $ IVar Builtin.Unit
                                         $ (ILam.  (MW ExplicitArg {arg:2} : IVar Builtin.Unit)
                                                => (IApp. IVar DerivedGen.Y
                                                        $ IVar {arg:2}
                                                        $ IVar {arg:1}))))))
         IClaim MW
                Export
                []
                (MkTy <Builtin.Unit>[]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                  $ IVar Builtin.Unit)))
         IDef <DerivedGen.Y>[1]
              [ PatClause (IApp. IVar <DerivedGen.Y>[1]
                               $ IBindVar ^fuel_arg^
                               $ IBindVar inter^<{arg:1}>)
                          (ILocal (ICase (IVar ^fuel_arg^)
                                         (IVar Data.Fuel.Fuel)
                                         [ PatClause (IVar Data.Fuel.Dry)
                                                     (IApp. IVar Test.DepTyCheck.Gen.label
                                                          $ (IApp. IVar fromString
                                                                 $ IPrimVal DerivedGen.Y[1] (dry fuel))
                                                          $ (IApp. IVar <<DerivedGen.A>>
                                                                 $ IVar Data.Fuel.Dry
                                                                 $ IVar inter^<{arg:1}>))
                                         , PatClause (IApp. IVar Data.Fuel.More
                                                          $ IBindVar ^sub^fuel_arg^)
                                                     (IApp. IVar Test.DepTyCheck.Gen.label
                                                          $ (IApp. IVar fromString
                                                                 $ IPrimVal DerivedGen.Y[1] (spend fuel))
                                                          $ (IApp. IVar Test.DepTyCheck.Gen.frequency
                                                                 $ (IApp. IVar ::
                                                                        $ (IApp. IVar Builtin.MkPair
                                                                               $ IVar Data.Nat.Pos.one
                                                                               $ (IApp. IVar <<DerivedGen.A>>
                                                                                      $ IVar ^fuel_arg^
                                                                                      $ IVar inter^<{arg:1}>))
                                                                        $ (IApp. IVar ::
                                                                               $ (IApp. IVar Builtin.MkPair
                                                                                      $ (IApp. IVar Deriving.DepTyCheck.Util.Reflection.leftDepth
                                                                                             $ IVar ^sub^fuel_arg^)
                                                                                      $ (IApp. IVar <<DerivedGen.B>>
                                                                                             $ IVar ^sub^fuel_arg^
                                                                                             $ IVar inter^<{arg:1}>))
                                                                               $ IVar Nil)))) ]))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<DerivedGen.A>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (MW ExplicitArg {arg:1} : IVar DerivedGen.X)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                                     $ (IApp. IVar Builtin.DPair.DPair
                                                            $ IVar Builtin.Unit
                                                            $ (ILam.  (MW ExplicitArg {arg:2} : IVar Builtin.Unit)
                                                                   => (IApp. IVar DerivedGen.Y
                                                                           $ IVar {arg:2}
                                                                           $ IVar {arg:1}))))))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<DerivedGen.B>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (MW ExplicitArg {arg:1} : IVar DerivedGen.X)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                                     $ (IApp. IVar Builtin.DPair.DPair
                                                            $ IVar Builtin.Unit
                                                            $ (ILam.  (MW ExplicitArg {arg:2} : IVar Builtin.Unit)
                                                                   => (IApp. IVar DerivedGen.Y
                                                                           $ IVar {arg:2}
                                                                           $ IVar {arg:1}))))))
                            IDef <<DerivedGen.A>>
                                 [ PatClause (IApp. IVar <<DerivedGen.A>>
                                                  $ IBindVar ^cons_fuel^
                                                  $ IVar DerivedGen.Nil)
                                             (IApp. IVar Test.DepTyCheck.Gen.label
                                                  $ (IApp. IVar fromString
                                                         $ IPrimVal DerivedGen.A (orders))
                                                  $ (IApp. IVar >>=
                                                         $ (IApp. IVar <Builtin.Unit>[]
                                                                $ IVar ^outmost-fuel^)
                                                         $ (ILam.  (MW ExplicitArg n : Implicit False)
                                                                => (IApp. INamedApp (IVar Prelude.pure)
                                                                                    f
                                                                                    (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                                                         $ Implicit True)
                                                                        $ (IApp. IVar Builtin.DPair.MkDPair
                                                                               $ Implicit True
                                                                               $ INamedApp (IVar DerivedGen.A)
                                                                                           n
                                                                                           (IVar n))))))
                                 , PatClause (IApp. IVar <<DerivedGen.A>>
                                                  $ Implicit True
                                                  $ Implicit True)
                                             (IVar empty) ]
                            IDef <<DerivedGen.B>>
                                 [ PatClause (IApp. IVar <<DerivedGen.B>>
                                                  $ IBindVar ^cons_fuel^
                                                  $ INamedApp (IApp. IVar DerivedGen.(::)
                                                                   $ IBindVar x
                                                                   $ IBindVar xs)
                                                              {conArg:1}
                                                              (IBindVar ^bnd^{conArg:2}))
                                             (IApp. IVar Test.DepTyCheck.Gen.label
                                                  $ (IApp. IVar fromString
                                                         $ IPrimVal DerivedGen.B (orders))
                                                  $ (IApp. IVar >>=
                                                         $ (IApp. IVar <DerivedGen.Y>[1]
                                                                $ IVar ^cons_fuel^
                                                                $ IVar xs)
                                                         $ (ILam.  (MW ExplicitArg {lamc:0} : Implicit False)
                                                                => ICase (IVar {lamc:0})
                                                                         (Implicit False)
                                                                         [ PatClause (IApp. IVar Builtin.DPair.MkDPair
                                                                                          $ IBindVar n
                                                                                          $ IBindVar ^bnd^{arg:3})
                                                                                     (IApp. INamedApp (IVar Prelude.pure)
                                                                                                      f
                                                                                                      (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                                                                           $ Implicit True)
                                                                                          $ (IApp. IVar Builtin.DPair.MkDPair
                                                                                                 $ Implicit True
                                                                                                 $ IAutoApp (IApp. INamedApp (INamedApp (INamedApp (IVar DerivedGen.B)
                                                                                                                                                   x
                                                                                                                                                   (IVar x))
                                                                                                                                        xs
                                                                                                                                        (IVar xs))
                                                                                                                             n
                                                                                                                             (IVar n)
                                                                                                                 $ IVar ^bnd^{arg:3})
                                                                                                            (IVar ^bnd^{conArg:2}))) ])))
                                 , PatClause (IApp. IVar <<DerivedGen.B>>
                                                  $ Implicit True
                                                  $ Implicit True)
                                             (IVar empty) ] ]
         IDef <Builtin.Unit>[]
              [ PatClause (IApp. IVar <Builtin.Unit>[] $ IBindVar ^fuel_arg^)
                          (ILocal (IApp. IVar Test.DepTyCheck.Gen.label
                                       $ (IApp. IVar fromString
                                              $ IPrimVal Builtin.Unit[] (non-recursive))
                                       $ (IApp. IVar <<Builtin.MkUnit>>
                                              $ IVar ^fuel_arg^)))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<Builtin.MkUnit>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ IVar Test.DepTyCheck.Gen.Emptiness.MaybeEmpty
                                                     $ IVar Builtin.Unit)))
                            IDef <<Builtin.MkUnit>>
                                 [ PatClause (IApp. IVar <<Builtin.MkUnit>>
                                                  $ IBindVar ^cons_fuel^)
                                             (IApp. IVar Test.DepTyCheck.Gen.label
                                                  $ (IApp. IVar fromString
                                                         $ IPrimVal Builtin.MkUnit (orders))
                                                  $ (IApp. INamedApp (IVar Prelude.pure)
                                                                     f
                                                                     (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                                          $ Implicit True)
                                                         $ IVar Builtin.MkUnit)) ] ]
