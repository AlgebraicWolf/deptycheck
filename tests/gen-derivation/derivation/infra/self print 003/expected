1/3: Building AlternativeCore (AlternativeCore.idr)
2/3: Building PrintDerivation (PrintDerivation.idr)
3/3: Building DerivedGen (DerivedGen.idr)
LOG gen.auto.derive.infra:0: type: (arg : Fuel) -> {auto conArg : ((arg : Fuel) -> Gen Nat)} -> Gen Bool
LOG gen.auto.derive.infra:0: 
ILam.  (MW ExplicitArg {fuel:2341} : IVar Data.Fuel.Fuel)
    => (MW AutoImplicit {externalAutoimpl:2340} : IPi.  (MW ExplicitArg {arg:2321} : IVar Data.Fuel.Fuel)
                                                     -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                             $ IVar Prelude.Types.Nat))
    => ILocal (IApp. IVar {("Prelude.Basics.Bool", []):0} $ IVar {fuel:2341})
         IClaim MW
                Export
                []
                (MkTy {("Prelude.Basics.Bool", []):0}
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ IVar Prelude.Basics.Bool)))
         IDef {("Prelude.Basics.Bool", []):0}
              [ PatClause (IApp. IVar {("Prelude.Basics.Bool", []):0}
                               $ IVar Dry)
                          (IVar empty)
              , PatClause (IApp. IVar {("Prelude.Basics.Bool", []):0}
                               $ (IApp. IVar More $ IBindVar fuel))
                          (IApp. IVar {("Prelude.Basics.Bool", []):0}
                               $ IVar fuel) ]
