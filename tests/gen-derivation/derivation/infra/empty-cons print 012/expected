1/3: Building AlternativeCore (AlternativeCore.idr)
2/3: Building PrintDerivation (PrintDerivation.idr)
3/3: Building DerivedGen (DerivedGen.idr)
LOG gen.auto.derive.infra:0: type: (arg : Fuel) -> (n : Nat) -> (m : Nat) -> Gen (X n m)
LOG gen.auto.derive.infra:0: 
ILam.  (MW ExplicitArg {fuel:856} : IVar Data.Fuel.Fuel)
    => ILocal (ILam.  (MW ExplicitArg n : IVar Prelude.Types.Nat)
                   => (MW ExplicitArg m : IVar Prelude.Types.Nat)
                   => (IApp. IVar <DerivedGen.X>[0, 1]
                           $ IVar {fuel:856}
                           $ IVar n
                           $ IVar m))
         IClaim MW
                Export
                []
                (MkTy <DerivedGen.X>[0, 1]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (MW ExplicitArg {arg:826} : IVar Prelude.Types.Nat)
                          -> (MW ExplicitArg {arg:829} : IVar Prelude.Types.Nat)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ (IApp. IVar DerivedGen.X
                                         $ IVar {arg:826}
                                         $ IVar {arg:829}))))
         IDef <DerivedGen.X>[0, 1]
              [ PatClause (IApp. IVar <DerivedGen.X>[0, 1]
                               $ IBindVar fuel_arg_86
                               $ IBindVar {arg:826}
                               $ IBindVar {arg:829})
                          (ILocal (ICase (IVar fuel_arg_86)
                                         (IVar Data.Fuel.Fuel)
                                         [ PatClause (IVar Data.Fuel.Dry)
                                                     (IApp. IVar Test.DepTyCheck.Gen.oneOf'
                                                          $ (IApp. IVar ::
                                                                 $ (IApp. IVar {cons_gen_for_DerivedGen.XE:7}
                                                                        $ IVar Data.Fuel.Dry
                                                                        $ IVar {arg:826}
                                                                        $ IVar {arg:829})
                                                                 $ (IApp. IVar ::
                                                                        $ (IApp. IVar {cons_gen_for_DerivedGen.XS:7}
                                                                               $ IVar Data.Fuel.Dry
                                                                               $ IVar {arg:826}
                                                                               $ IVar {arg:829})
                                                                        $ IVar Nil)))
                                         , PatClause (IApp. IVar Data.Fuel.More
                                                          $ IBindVar sub_fuel_arg_86)
                                                     (IApp. IVar Test.DepTyCheck.Gen.oneOf'
                                                          $ (IApp. IVar ::
                                                                 $ (IApp. IVar {cons_gen_for_DerivedGen.XE:7}
                                                                        $ IVar sub_fuel_arg_86
                                                                        $ IVar {arg:826}
                                                                        $ IVar {arg:829})
                                                                 $ (IApp. IVar ::
                                                                        $ (IApp. IVar {cons_gen_for_DerivedGen.XS:7}
                                                                               $ IVar sub_fuel_arg_86
                                                                               $ IVar {arg:826}
                                                                               $ IVar {arg:829})
                                                                        $ IVar Nil))) ]))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy {cons_gen_for_DerivedGen.XE:7}
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (MW ExplicitArg {arg:826} : IVar Prelude.Types.Nat)
                                             -> (MW ExplicitArg {arg:829} : IVar Prelude.Types.Nat)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ (IApp. IVar DerivedGen.X
                                                            $ IVar {arg:826}
                                                            $ IVar {arg:829}))))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy {cons_gen_for_DerivedGen.XS:7}
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (MW ExplicitArg {arg:826} : IVar Prelude.Types.Nat)
                                             -> (MW ExplicitArg {arg:829} : IVar Prelude.Types.Nat)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ (IApp. IVar DerivedGen.X
                                                            $ IVar {arg:826}
                                                            $ IVar {arg:829}))))
                            IDef {cons_gen_for_DerivedGen.XE:7}
                                 [ PatClause (IApp. IVar {cons_gen_for_DerivedGen.XE:7}
                                                  $ IBindVar fuel_cons_arg
                                                  $ IBindVar n
                                                  $ IBindVar to_be_deceqed__n0)
                                             (ICase (IApp. IVar Decidable.Equality.decEq
                                                         $ IVar n
                                                         $ IVar to_be_deceqed__n0)
                                                    (Implicit False)
                                                    [ PatClause (IApp. IVar Prelude.No
                                                                     $ Implicit True)
                                                                (IVar Prelude.empty)
                                                    , PatClause (IApp. IVar Prelude.Yes
                                                                     $ IVar Builtin.Refl)
                                                                (IVar empty) ]) ]
                            IDef {cons_gen_for_DerivedGen.XS:7}
                                 [ PatClause (IApp. IVar {cons_gen_for_DerivedGen.XS:7}
                                                  $ IBindVar fuel_cons_arg
                                                  $ IBindVar n
                                                  $ (IApp. IVar Prelude.Types.S
                                                         $ IBindVar to_be_deceqed__n0))
                                             (ICase (IApp. IVar Decidable.Equality.decEq
                                                         $ IVar n
                                                         $ IVar to_be_deceqed__n0)
                                                    (Implicit False)
                                                    [ PatClause (IApp. IVar Prelude.No
                                                                     $ Implicit True)
                                                                (IVar Prelude.empty)
                                                    , PatClause (IApp. IVar Prelude.Yes
                                                                     $ IVar Builtin.Refl)
                                                                (IVar empty) ])
                                 , PatClause (IApp. IVar {cons_gen_for_DerivedGen.XS:7}
                                                  $ Implicit True
                                                  $ Implicit True
                                                  $ Implicit True)
                                             (IVar empty) ] ]
