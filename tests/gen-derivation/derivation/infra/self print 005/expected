1/3: Building AlternativeCore (AlternativeCore.idr)
2/3: Building PrintDerivation (PrintDerivation.idr)
3/3: Building DerivedGen (DerivedGen.idr)
LOG gen.auto.derive.infra:0: type: (arg : Fuel) -> Gen (DPair Nat (\n => X n))
LOG gen.auto.derive.infra:0: 
ILam.  (MW ExplicitArg {fuel:843} : IVar Data.Fuel.Fuel)
    => ILocal (IApp. IVar <DerivedGen.X>[] $ IVar {fuel:843})
         IClaim MW
                Export
                []
                (MkTy <DerivedGen.X>[]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ (IApp. IVar Builtin.DPair.DPair
                                         $ IVar Prelude.Types.Nat
                                         $ (ILam.  (MW ExplicitArg {arg:826} : IVar Prelude.Types.Nat)
                                                => (IApp. IVar DerivedGen.X
                                                        $ IVar {arg:826}))))))
         IDef <DerivedGen.X>[]
              [ PatClause (IApp. IVar <DerivedGen.X>[] $ IVar Dry)
                          (IVar empty)
              , PatClause (IApp. IVar <DerivedGen.X>[]
                               $ (IApp. IVar More $ IBindVar fuel))
                          (IApp. IVar <DerivedGen.X>[] $ IVar fuel) ]
