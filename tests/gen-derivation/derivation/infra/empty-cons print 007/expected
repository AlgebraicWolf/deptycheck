1/3: Building AlternativeCore (AlternativeCore.idr)
2/3: Building PrintDerivation (PrintDerivation.idr)
3/3: Building DerivedGen (DerivedGen.idr)
LOG gen.auto.derive.infra:0: type: (arg : Fuel) -> Gen (DPair Nat (\n => DPair Bool (\b => X n b)))
LOG gen.auto.derive.infra:0: 
ILam.  (MW ExplicitArg {fuel:862} : IVar Data.Fuel.Fuel)
    => ILocal (IApp. IVar <DerivedGen.X>[] $ IVar {fuel:862})
         IClaim MW
                Export
                []
                (MkTy <DerivedGen.X>[]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ (IApp. IVar Builtin.DPair.DPair
                                         $ IVar Prelude.Types.Nat
                                         $ (ILam.  (MW ExplicitArg {arg:830} : IVar Prelude.Types.Nat)
                                                => (IApp. IVar Builtin.DPair.DPair
                                                        $ IVar Prelude.Basics.Bool
                                                        $ (ILam.  (MW ExplicitArg {arg:833} : IVar Prelude.Basics.Bool)
                                                               => (IApp. IVar DerivedGen.X
                                                                       $ IVar {arg:830}
                                                                       $ IVar {arg:833}))))))))
         IDef <DerivedGen.X>[]
              [ PatClause (IApp. IVar <DerivedGen.X>[] $ IBindVar ^fuel_arg^)
                          (ILocal (ICase (IVar ^fuel_arg^)
                                         (IVar Data.Fuel.Fuel)
                                         [ PatClause (IVar Data.Fuel.Dry)
                                                     (IApp. IVar Test.DepTyCheck.Gen.oneOf'
                                                          $ (IApp. IVar ::
                                                                 $ (IApp. IVar <<DerivedGen.X0>>
                                                                        $ IVar Data.Fuel.Dry)
                                                                 $ (IApp. IVar ::
                                                                        $ (IApp. IVar <<DerivedGen.X1>>
                                                                               $ IVar Data.Fuel.Dry)
                                                                        $ IVar Nil)))
                                         , PatClause (IApp. IVar Data.Fuel.More
                                                          $ IBindVar ^sub^fuel_arg^)
                                                     (IApp. IVar Test.DepTyCheck.Gen.oneOf'
                                                          $ (IApp. IVar ::
                                                                 $ (IApp. IVar <<DerivedGen.X0>>
                                                                        $ IVar ^sub^fuel_arg^)
                                                                 $ (IApp. IVar ::
                                                                        $ (IApp. IVar <<DerivedGen.X1>>
                                                                               $ IVar ^sub^fuel_arg^)
                                                                        $ IVar Nil))) ]))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<DerivedGen.X0>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ (IApp. IVar Builtin.DPair.DPair
                                                            $ IVar Prelude.Types.Nat
                                                            $ (ILam.  (MW ExplicitArg {arg:830} : IVar Prelude.Types.Nat)
                                                                   => (IApp. IVar Builtin.DPair.DPair
                                                                           $ IVar Prelude.Basics.Bool
                                                                           $ (ILam.  (MW ExplicitArg {arg:833} : IVar Prelude.Basics.Bool)
                                                                                  => (IApp. IVar DerivedGen.X
                                                                                          $ IVar {arg:830}
                                                                                          $ IVar {arg:833}))))))))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<DerivedGen.X1>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ (IApp. IVar Builtin.DPair.DPair
                                                            $ IVar Prelude.Types.Nat
                                                            $ (ILam.  (MW ExplicitArg {arg:830} : IVar Prelude.Types.Nat)
                                                                   => (IApp. IVar Builtin.DPair.DPair
                                                                           $ IVar Prelude.Basics.Bool
                                                                           $ (ILam.  (MW ExplicitArg {arg:833} : IVar Prelude.Basics.Bool)
                                                                                  => (IApp. IVar DerivedGen.X
                                                                                          $ IVar {arg:830}
                                                                                          $ IVar {arg:833}))))))))
                            IDef <<DerivedGen.X0>>
                                 [ PatClause (IApp. IVar <<DerivedGen.X0>>
                                                  $ IBindVar ^cons_fuel^)
                                             (IVar empty) ]
                            IDef <<DerivedGen.X1>>
                                 [ PatClause (IApp. IVar <<DerivedGen.X1>>
                                                  $ IBindVar ^cons_fuel^)
                                             (IVar empty) ] ]
