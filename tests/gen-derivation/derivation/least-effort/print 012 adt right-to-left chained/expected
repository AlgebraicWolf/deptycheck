1/3: Building AlternativeCore (AlternativeCore.idr)
2/3: Building PrintDerivation (PrintDerivation.idr)
3/3: Building DerivedGen (DerivedGen.idr)
LOG gen.auto.derive.infra:0: type: (arg : Fuel) -> Gen Y
LOG gen.auto.derive.infra:0: 
ILam.  (MW ExplicitArg {fuel:865} : IVar Data.Fuel.Fuel)
    => ILocal (IApp. IVar <DerivedGen.Y>[] $ IVar {fuel:865})
         IClaim MW
                Export
                []
                (MkTy <Prelude.Types.Nat>[]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ IVar Prelude.Types.Nat)))
         IClaim MW
                Export
                []
                (MkTy <DerivedGen.X1>[]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ (IApp. IVar Builtin.DPair.DPair
                                         $ IVar Prelude.Types.Nat
                                         $ (ILam.  (MW ExplicitArg {arg:826} : IVar Prelude.Types.Nat)
                                                => (IApp. IVar DerivedGen.X1
                                                        $ IVar {arg:826}))))))
         IClaim MW
                Export
                []
                (MkTy <DerivedGen.X2>[]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ (IApp. IVar Builtin.DPair.DPair
                                         $ IVar Prelude.Types.Nat
                                         $ (ILam.  (MW ExplicitArg {arg:837} : IVar Prelude.Types.Nat)
                                                => (IApp. IVar DerivedGen.X2
                                                        $ IVar {arg:837}))))))
         IClaim MW
                Export
                []
                (MkTy <DerivedGen.Y>[]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ IVar DerivedGen.Y)))
         IDef <Prelude.Types.Nat>[]
              [ PatClause (IApp. IVar <Prelude.Types.Nat>[]
                               $ IBindVar ^fuel_arg^)
                          (ILocal (ICase (IVar ^fuel_arg^)
                                         (IVar Data.Fuel.Fuel)
                                         [ PatClause (IVar Data.Fuel.Dry)
                                                     (IApp. IVar Test.DepTyCheck.Gen.oneOf'
                                                          $ (IApp. IVar ::
                                                                 $ (IApp. IVar <<Prelude.Types.Z>>
                                                                        $ IVar Data.Fuel.Dry)
                                                                 $ IVar Nil))
                                         , PatClause (IApp. IVar Data.Fuel.More
                                                          $ IBindVar ^sub^fuel_arg^)
                                                     (IApp. IVar Test.DepTyCheck.Gen.oneOf'
                                                          $ (IApp. IVar ::
                                                                 $ (IApp. IVar <<Prelude.Types.Z>>
                                                                        $ IVar ^sub^fuel_arg^)
                                                                 $ (IApp. IVar ::
                                                                        $ (IApp. IVar <<Prelude.Types.S>>
                                                                               $ IVar ^sub^fuel_arg^)
                                                                        $ IVar Nil))) ]))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<Prelude.Types.Z>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ IVar Prelude.Types.Nat)))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<Prelude.Types.S>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ IVar Prelude.Types.Nat)))
                            IDef <<Prelude.Types.Z>>
                                 [ PatClause (IApp. IVar <<Prelude.Types.Z>>
                                                  $ IBindVar ^cons_fuel^)
                                             (IApp. IVar Test.DepTyCheck.Gen.oneOf'
                                                  $ (IApp. IVar ::
                                                         $ (IApp. (INamedApp. IVar Prelude.pure
                                                                            $ IVar Test.DepTyCheck.Gen.Gen)
                                                                $ IVar Prelude.Types.Z)
                                                         $ IVar Nil)) ]
                            IDef <<Prelude.Types.S>>
                                 [ PatClause (IApp. IVar <<Prelude.Types.S>>
                                                  $ IBindVar ^cons_fuel^)
                                             (IApp. IVar Test.DepTyCheck.Gen.oneOf'
                                                  $ (IApp. IVar ::
                                                         $ (IApp. IVar >>=
                                                                $ (IApp. IVar <Prelude.Types.Nat>[]
                                                                       $ IVar ^cons_fuel^)
                                                                $ (ILam.  (MW ExplicitArg {lamc:0} : Implicit False)
                                                                       => ICase (IVar {lamc:0})
                                                                                (Implicit False)
                                                                                [ PatClause (IBindVar ^bnd^{arg:682})
                                                                                            (IApp. (INamedApp. IVar Prelude.pure
                                                                                                             $ IVar Test.DepTyCheck.Gen.Gen)
                                                                                                 $ (IApp. IVar Prelude.Types.S
                                                                                                        $ IVar ^bnd^{arg:682})) ]))
                                                         $ IVar Nil)) ] ]
         IDef <DerivedGen.X1>[]
              [ PatClause (IApp. IVar <DerivedGen.X1>[] $ IBindVar ^fuel_arg^)
                          (ILocal (ICase (IVar ^fuel_arg^)
                                         (IVar Data.Fuel.Fuel)
                                         [ PatClause (IVar Data.Fuel.Dry)
                                                     (IApp. IVar Test.DepTyCheck.Gen.oneOf'
                                                          $ (IApp. IVar ::
                                                                 $ (IApp. IVar <<DerivedGen.MkX1>>
                                                                        $ IVar Data.Fuel.Dry)
                                                                 $ IVar Nil))
                                         , PatClause (IApp. IVar Data.Fuel.More
                                                          $ IBindVar ^sub^fuel_arg^)
                                                     (IApp. IVar Test.DepTyCheck.Gen.oneOf'
                                                          $ (IApp. IVar ::
                                                                 $ (IApp. IVar <<DerivedGen.MkX1>>
                                                                        $ IVar ^sub^fuel_arg^)
                                                                 $ IVar Nil)) ]))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<DerivedGen.MkX1>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ (IApp. IVar Builtin.DPair.DPair
                                                            $ IVar Prelude.Types.Nat
                                                            $ (ILam.  (MW ExplicitArg {arg:826} : IVar Prelude.Types.Nat)
                                                                   => (IApp. IVar DerivedGen.X1
                                                                           $ IVar {arg:826}))))))
                            IDef <<DerivedGen.MkX1>>
                                 [ PatClause (IApp. IVar <<DerivedGen.MkX1>>
                                                  $ IBindVar ^cons_fuel^)
                                             (IApp. IVar Test.DepTyCheck.Gen.oneOf'
                                                  $ (IApp. IVar ::
                                                         $ (IApp. IVar >>=
                                                                $ (IApp. IVar <Prelude.Types.Nat>[]
                                                                       $ IVar ^cons_fuel^)
                                                                $ (ILam.  (MW ExplicitArg {lamc:0} : Implicit False)
                                                                       => ICase (IVar {lamc:0})
                                                                                (Implicit False)
                                                                                [ PatClause (IBindVar n)
                                                                                            (IApp. (INamedApp. IVar Prelude.pure
                                                                                                             $ IVar Test.DepTyCheck.Gen.Gen)
                                                                                                 $ (IApp. IVar Builtin.DPair.MkDPair
                                                                                                        $ Implicit True
                                                                                                        $ (IApp. IVar DerivedGen.MkX1
                                                                                                               $ IVar n))) ]))
                                                         $ IVar Nil)) ] ]
         IDef <DerivedGen.X2>[]
              [ PatClause (IApp. IVar <DerivedGen.X2>[] $ IBindVar ^fuel_arg^)
                          (ILocal (ICase (IVar ^fuel_arg^)
                                         (IVar Data.Fuel.Fuel)
                                         [ PatClause (IVar Data.Fuel.Dry)
                                                     (IApp. IVar Test.DepTyCheck.Gen.oneOf'
                                                          $ (IApp. IVar ::
                                                                 $ (IApp. IVar <<DerivedGen.MkX2>>
                                                                        $ IVar Data.Fuel.Dry)
                                                                 $ IVar Nil))
                                         , PatClause (IApp. IVar Data.Fuel.More
                                                          $ IBindVar ^sub^fuel_arg^)
                                                     (IApp. IVar Test.DepTyCheck.Gen.oneOf'
                                                          $ (IApp. IVar ::
                                                                 $ (IApp. IVar <<DerivedGen.MkX2>>
                                                                        $ IVar ^sub^fuel_arg^)
                                                                 $ IVar Nil)) ]))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<DerivedGen.MkX2>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ (IApp. IVar Builtin.DPair.DPair
                                                            $ IVar Prelude.Types.Nat
                                                            $ (ILam.  (MW ExplicitArg {arg:837} : IVar Prelude.Types.Nat)
                                                                   => (IApp. IVar DerivedGen.X2
                                                                           $ IVar {arg:837}))))))
                            IDef <<DerivedGen.MkX2>>
                                 [ PatClause (IApp. IVar <<DerivedGen.MkX2>>
                                                  $ IBindVar ^cons_fuel^)
                                             (IApp. IVar Test.DepTyCheck.Gen.oneOf'
                                                  $ (IApp. IVar ::
                                                         $ (IApp. IVar >>=
                                                                $ (IApp. IVar <DerivedGen.X1>[]
                                                                       $ IVar ^cons_fuel^)
                                                                $ (ILam.  (MW ExplicitArg {lamc:0} : Implicit False)
                                                                       => ICase (IVar {lamc:0})
                                                                                (Implicit False)
                                                                                [ PatClause (IApp. IVar Builtin.DPair.MkDPair
                                                                                                 $ IBindVar n
                                                                                                 $ IBindVar ^bnd^{arg:846})
                                                                                            (IApp. (INamedApp. IVar Prelude.pure
                                                                                                             $ IVar Test.DepTyCheck.Gen.Gen)
                                                                                                 $ (IApp. IVar Builtin.DPair.MkDPair
                                                                                                        $ Implicit True
                                                                                                        $ (IApp. IVar DerivedGen.MkX2
                                                                                                               $ IVar n
                                                                                                               $ IVar ^bnd^{arg:846}))) ]))
                                                         $ IVar Nil)) ] ]
         IDef <DerivedGen.Y>[]
              [ PatClause (IApp. IVar <DerivedGen.Y>[] $ IBindVar ^fuel_arg^)
                          (ILocal (ICase (IVar ^fuel_arg^)
                                         (IVar Data.Fuel.Fuel)
                                         [ PatClause (IVar Data.Fuel.Dry)
                                                     (IApp. IVar Test.DepTyCheck.Gen.oneOf'
                                                          $ (IApp. IVar ::
                                                                 $ (IApp. IVar <<DerivedGen.MkY>>
                                                                        $ IVar Data.Fuel.Dry)
                                                                 $ IVar Nil))
                                         , PatClause (IApp. IVar Data.Fuel.More
                                                          $ IBindVar ^sub^fuel_arg^)
                                                     (IApp. IVar Test.DepTyCheck.Gen.oneOf'
                                                          $ (IApp. IVar ::
                                                                 $ (IApp. IVar <<DerivedGen.MkY>>
                                                                        $ IVar ^sub^fuel_arg^)
                                                                 $ IVar Nil)) ]))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy <<DerivedGen.MkY>>
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ IVar DerivedGen.Y)))
                            IDef <<DerivedGen.MkY>>
                                 [ PatClause (IApp. IVar <<DerivedGen.MkY>>
                                                  $ IBindVar ^cons_fuel^)
                                             (IApp. IVar Test.DepTyCheck.Gen.oneOf'
                                                  $ (IApp. IVar ::
                                                         $ (IApp. IVar >>=
                                                                $ (IApp. IVar <DerivedGen.X2>[]
                                                                       $ IVar ^cons_fuel^)
                                                                $ (ILam.  (MW ExplicitArg {lamc:0} : Implicit False)
                                                                       => ICase (IVar {lamc:0})
                                                                                (Implicit False)
                                                                                [ PatClause (IApp. IVar Builtin.DPair.MkDPair
                                                                                                 $ IBindVar n
                                                                                                 $ IBindVar ^bnd^{arg:854})
                                                                                            (IApp. (INamedApp. IVar Prelude.pure
                                                                                                             $ IVar Test.DepTyCheck.Gen.Gen)
                                                                                                 $ (IApp. (INamedApp. IVar DerivedGen.MkY
                                                                                                                    $ IVar n)
                                                                                                        $ IVar ^bnd^{arg:854})) ]))
                                                         $ IVar Nil)) ] ]
