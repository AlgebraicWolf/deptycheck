1/3: Building AlternativeCore (AlternativeCore.idr)
2/3: Building PrintDerivation (PrintDerivation.idr)
3/3: Building DerivedGen (DerivedGen.idr)
LOG gen.auto.derive.infra:0: type: (arg : Fuel) -> {auto conArg : ((arg : Fuel) -> Gen String)} -> {auto conArg : ((arg : Fuel) -> Gen Nat)} -> Gen Y
LOG gen.auto.derive.infra:0: 
ILam.  (MW ExplicitArg {fuel:880} : IVar Data.Fuel.Fuel)
    => (MW AutoImplicit {externalAutoimpl:878} : IPi.  (MW ExplicitArg {arg:842} : IVar Data.Fuel.Fuel)
                                                    -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                            $ IPrimVal String))
    => (MW AutoImplicit {externalAutoimpl:879} : IPi.  (MW ExplicitArg {arg:849} : IVar Data.Fuel.Fuel)
                                                    -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                            $ IVar Prelude.Types.Nat))
    => ILocal (IApp. IVar {("DerivedGen.Y", []):0} $ IVar {fuel:880})
         IClaim MW
                Export
                []
                (MkTy {("DerivedGen.X", []):0}
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ (IApp. IVar Builtin.DPair.DPair
                                         $ IPrimVal String
                                         $ (ILam.  (MW ExplicitArg {arg:808} : IPrimVal String)
                                                => (IApp. IVar Builtin.DPair.DPair
                                                        $ IVar Prelude.Types.Nat
                                                        $ (ILam.  (MW ExplicitArg {arg:811} : IVar Prelude.Types.Nat)
                                                               => (IApp. IVar DerivedGen.X
                                                                       $ IVar {arg:808}
                                                                       $ IVar {arg:811}))))))))
         IClaim MW
                Export
                []
                (MkTy {("DerivedGen.X", [0]):0}
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (MW ExplicitArg {arg:808} : IPrimVal String)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ (IApp. IVar Builtin.DPair.DPair
                                         $ IVar Prelude.Types.Nat
                                         $ (ILam.  (MW ExplicitArg {arg:811} : IVar Prelude.Types.Nat)
                                                => (IApp. IVar DerivedGen.X
                                                        $ IVar {arg:808}
                                                        $ IVar {arg:811}))))))
         IClaim MW
                Export
                []
                (MkTy {("DerivedGen.Y", []):0}
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ IVar DerivedGen.Y)))
         IDef {("DerivedGen.X", []):0}
              [ PatClause (IApp. IVar {("DerivedGen.X", []):0}
                               $ IBindVar fuel_arg_86)
                          (ILocal (ICase (IVar fuel_arg_86)
                                         (IVar Data.Fuel.Fuel)
                                         [ PatClause (IVar Data.Fuel.Dry)
                                                     (IApp. IVar Test.DepTyCheck.Gen.oneOf'
                                                          $ (IApp. IVar ::
                                                                 $ (IApp. IVar {cons_gen_for_DerivedGen.MkX:7}
                                                                        $ IVar Data.Fuel.Dry)
                                                                 $ IVar Nil))
                                         , PatClause (IApp. IVar Data.Fuel.More
                                                          $ IBindVar sub_fuel_arg_86)
                                                     (IApp. IVar Test.DepTyCheck.Gen.oneOf'
                                                          $ (IApp. IVar ::
                                                                 $ (IApp. IVar {cons_gen_for_DerivedGen.MkX:7}
                                                                        $ IVar sub_fuel_arg_86)
                                                                 $ IVar Nil)) ]))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy {cons_gen_for_DerivedGen.MkX:7}
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ (IApp. IVar Builtin.DPair.DPair
                                                            $ IPrimVal String
                                                            $ (ILam.  (MW ExplicitArg {arg:808} : IPrimVal String)
                                                                   => (IApp. IVar Builtin.DPair.DPair
                                                                           $ IVar Prelude.Types.Nat
                                                                           $ (ILam.  (MW ExplicitArg {arg:811} : IVar Prelude.Types.Nat)
                                                                                  => (IApp. IVar DerivedGen.X
                                                                                          $ IVar {arg:808}
                                                                                          $ IVar {arg:811}))))))))
                            IDef {cons_gen_for_DerivedGen.MkX:7}
                                 [ PatClause (IApp. IVar {cons_gen_for_DerivedGen.MkX:7}
                                                  $ IBindVar fuel_cons_arg)
                                             (IApp. IVar Test.DepTyCheck.Gen.oneOf'
                                                  $ (IApp. IVar ::
                                                         $ (IApp. IVar >>=
                                                                $ (IApp. IVar {externalAutoimpl:878}
                                                                       $ IVar fuel_cons_arg)
                                                                $ (ILam.  (MW ExplicitArg {lamc:0} : Implicit False)
                                                                       => ICase (IVar {lamc:0})
                                                                                (Implicit False)
                                                                                [ PatClause (IBindVar n)
                                                                                            (IApp. IVar >>=
                                                                                                 $ (IApp. IVar {externalAutoimpl:879}
                                                                                                        $ IVar fuel_cons_arg)
                                                                                                 $ (ILam.  (MW ExplicitArg {lamc:0} : Implicit False)
                                                                                                        => ICase (IVar {lamc:0})
                                                                                                                 (Implicit False)
                                                                                                                 [ PatClause (IBindVar m)
                                                                                                                             (IApp. (INamedApp. IVar Prelude.pure
                                                                                                                                              $ IVar Test.DepTyCheck.Gen.Gen)
                                                                                                                                  $ (IApp. IVar Builtin.DPair.MkDPair
                                                                                                                                         $ Implicit True
                                                                                                                                         $ (IApp. IVar Builtin.DPair.MkDPair
                                                                                                                                                $ Implicit True
                                                                                                                                                $ (IApp. IVar DerivedGen.MkX
                                                                                                                                                       $ IVar n
                                                                                                                                                       $ IVar m)))) ])) ]))
                                                         $ IVar Nil)) ] ]
         IDef {("DerivedGen.X", [0]):0}
              [ PatClause (IApp. IVar {("DerivedGen.X", [0]):0}
                               $ IBindVar fuel_arg_86
                               $ IBindVar {arg:808})
                          (ILocal (ICase (IVar fuel_arg_86)
                                         (IVar Data.Fuel.Fuel)
                                         [ PatClause (IVar Data.Fuel.Dry)
                                                     (IApp. IVar Test.DepTyCheck.Gen.oneOf'
                                                          $ (IApp. IVar ::
                                                                 $ (IApp. IVar {cons_gen_for_DerivedGen.MkX:7}
                                                                        $ IVar Data.Fuel.Dry
                                                                        $ IVar {arg:808})
                                                                 $ IVar Nil))
                                         , PatClause (IApp. IVar Data.Fuel.More
                                                          $ IBindVar sub_fuel_arg_86)
                                                     (IApp. IVar Test.DepTyCheck.Gen.oneOf'
                                                          $ (IApp. IVar ::
                                                                 $ (IApp. IVar {cons_gen_for_DerivedGen.MkX:7}
                                                                        $ IVar sub_fuel_arg_86
                                                                        $ IVar {arg:808})
                                                                 $ IVar Nil)) ]))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy {cons_gen_for_DerivedGen.MkX:7}
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (MW ExplicitArg {arg:808} : IPrimVal String)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ (IApp. IVar Builtin.DPair.DPair
                                                            $ IVar Prelude.Types.Nat
                                                            $ (ILam.  (MW ExplicitArg {arg:811} : IVar Prelude.Types.Nat)
                                                                   => (IApp. IVar DerivedGen.X
                                                                           $ IVar {arg:808}
                                                                           $ IVar {arg:811}))))))
                            IDef {cons_gen_for_DerivedGen.MkX:7}
                                 [ PatClause (IApp. IVar {cons_gen_for_DerivedGen.MkX:7}
                                                  $ IBindVar fuel_cons_arg
                                                  $ IBindVar n)
                                             (IApp. IVar Test.DepTyCheck.Gen.oneOf'
                                                  $ (IApp. IVar ::
                                                         $ (IApp. IVar >>=
                                                                $ (IApp. IVar {externalAutoimpl:879}
                                                                       $ IVar fuel_cons_arg)
                                                                $ (ILam.  (MW ExplicitArg {lamc:0} : Implicit False)
                                                                       => ICase (IVar {lamc:0})
                                                                                (Implicit False)
                                                                                [ PatClause (IBindVar m)
                                                                                            (IApp. (INamedApp. IVar Prelude.pure
                                                                                                             $ IVar Test.DepTyCheck.Gen.Gen)
                                                                                                 $ (IApp. IVar Builtin.DPair.MkDPair
                                                                                                        $ Implicit True
                                                                                                        $ (IApp. IVar DerivedGen.MkX
                                                                                                               $ IVar n
                                                                                                               $ IVar m))) ]))
                                                         $ IVar Nil)) ] ]
         IDef {("DerivedGen.Y", []):0}
              [ PatClause (IApp. IVar {("DerivedGen.Y", []):0}
                               $ IBindVar fuel_arg_86)
                          (ILocal (ICase (IVar fuel_arg_86)
                                         (IVar Data.Fuel.Fuel)
                                         [ PatClause (IVar Data.Fuel.Dry)
                                                     (IApp. IVar Test.DepTyCheck.Gen.oneOf'
                                                          $ (IApp. IVar ::
                                                                 $ (IApp. IVar {cons_gen_for_DerivedGen.MkY:7}
                                                                        $ IVar Data.Fuel.Dry)
                                                                 $ IVar Nil))
                                         , PatClause (IApp. IVar Data.Fuel.More
                                                          $ IBindVar sub_fuel_arg_86)
                                                     (IApp. IVar Test.DepTyCheck.Gen.oneOf'
                                                          $ (IApp. IVar ::
                                                                 $ (IApp. IVar {cons_gen_for_DerivedGen.MkY:7}
                                                                        $ IVar sub_fuel_arg_86)
                                                                 $ IVar Nil)) ]))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy {cons_gen_for_DerivedGen.MkY:7}
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ IVar DerivedGen.Y)))
                            IDef {cons_gen_for_DerivedGen.MkY:7}
                                 [ PatClause (IApp. IVar {cons_gen_for_DerivedGen.MkY:7}
                                                  $ IBindVar fuel_cons_arg)
                                             (IApp. IVar Test.DepTyCheck.Gen.oneOf'
                                                  $ (IApp. IVar ::
                                                         $ (IApp. IVar >>=
                                                                $ (IApp. IVar {("DerivedGen.X", []):0}
                                                                       $ IVar fuel_cons_arg)
                                                                $ (ILam.  (MW ExplicitArg {lamc:0} : Implicit False)
                                                                       => ICase (IVar {lamc:0})
                                                                                (Implicit False)
                                                                                [ PatClause (IApp. IVar Builtin.DPair.MkDPair
                                                                                                 $ IBindVar n
                                                                                                 $ (IApp. IVar Builtin.DPair.MkDPair
                                                                                                        $ IBindVar k
                                                                                                        $ IBindVar __bnd_{arg:832}))
                                                                                            (IApp. IVar >>=
                                                                                                 $ (IApp. IVar {("DerivedGen.X", [0]):0}
                                                                                                        $ IVar fuel_cons_arg
                                                                                                        $ IVar n)
                                                                                                 $ (ILam.  (MW ExplicitArg {lamc:0} : Implicit False)
                                                                                                        => ICase (IVar {lamc:0})
                                                                                                                 (Implicit False)
                                                                                                                 [ PatClause (IApp. IVar Builtin.DPair.MkDPair
                                                                                                                                  $ IBindVar m
                                                                                                                                  $ IBindVar __bnd_{arg:829})
                                                                                                                             (IApp. (INamedApp. IVar Prelude.pure
                                                                                                                                              $ IVar Test.DepTyCheck.Gen.Gen)
                                                                                                                                  $ (IApp. (INamedApp. IVar DerivedGen.MkY
                                                                                                                                                     $ IVar k
                                                                                                                                                     $ IVar m
                                                                                                                                                     $ IVar n)
                                                                                                                                         $ IVar __bnd_{arg:829}
                                                                                                                                         $ IVar __bnd_{arg:832})) ])) ]))
                                                         $ IVar Nil)) ] ]
