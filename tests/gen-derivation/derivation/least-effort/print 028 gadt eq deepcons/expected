1/3: Building AlternativeCore (AlternativeCore.idr)
2/3: Building PrintDerivation (PrintDerivation.idr)
3/3: Building DerivedGen (DerivedGen.idr)
LOG gen.auto.derive.infra:0: type: (arg : Fuel) -> (a : Nat) -> (b : Nat) -> Gen (LT2 a b)
LOG gen.auto.derive.infra:0: 
ILam.  (MW ExplicitArg {fuel:860} : IVar Data.Fuel.Fuel)
    => ILocal (ILam.  (MW ExplicitArg a : IVar Prelude.Types.Nat)
                   => (MW ExplicitArg b : IVar Prelude.Types.Nat)
                   => (IApp. IVar <DerivedGen.LT2>[0, 1]
                           $ IVar {fuel:860}
                           $ IVar a
                           $ IVar b))
         IClaim MW
                Export
                []
                (MkTy <DerivedGen.LT2>[0, 1]
                      (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                          -> (MW ExplicitArg {arg:826} : IVar Prelude.Types.Nat)
                          -> (MW ExplicitArg {arg:829} : IVar Prelude.Types.Nat)
                          -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                  $ (IApp. IVar DerivedGen.LT2
                                         $ IVar {arg:826}
                                         $ IVar {arg:829}))))
         IDef <DerivedGen.LT2>[0, 1]
              [ PatClause (IApp. IVar <DerivedGen.LT2>[0, 1]
                               $ IBindVar ^fuel_arg^
                               $ IBindVar {arg:826}
                               $ IBindVar {arg:829})
                          (ILocal (ICase (IVar ^fuel_arg^)
                                         (IVar Data.Fuel.Fuel)
                                         [ PatClause (IVar Data.Fuel.Dry)
                                                     (IApp. IVar Test.DepTyCheck.Gen.oneOf'
                                                          $ (IApp. IVar ::
                                                                 $ (IApp. IVar {cons_gen_for_DerivedGen.Base:7}
                                                                        $ IVar Data.Fuel.Dry
                                                                        $ IVar {arg:826}
                                                                        $ IVar {arg:829})
                                                                 $ IVar Nil))
                                         , PatClause (IApp. IVar Data.Fuel.More
                                                          $ IBindVar ^sub^fuel_arg^)
                                                     (IApp. IVar Test.DepTyCheck.Gen.oneOf'
                                                          $ (IApp. IVar ::
                                                                 $ (IApp. IVar {cons_gen_for_DerivedGen.Base:7}
                                                                        $ IVar ^sub^fuel_arg^
                                                                        $ IVar {arg:826}
                                                                        $ IVar {arg:829})
                                                                 $ (IApp. IVar ::
                                                                        $ (IApp. IVar {cons_gen_for_DerivedGen.Step:7}
                                                                               $ IVar ^sub^fuel_arg^
                                                                               $ IVar {arg:826}
                                                                               $ IVar {arg:829})
                                                                        $ IVar Nil))) ]))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy {cons_gen_for_DerivedGen.Base:7}
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (MW ExplicitArg {arg:826} : IVar Prelude.Types.Nat)
                                             -> (MW ExplicitArg {arg:829} : IVar Prelude.Types.Nat)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ (IApp. IVar DerivedGen.LT2
                                                            $ IVar {arg:826}
                                                            $ IVar {arg:829}))))
                            IClaim MW
                                   Export
                                   []
                                   (MkTy {cons_gen_for_DerivedGen.Step:7}
                                         (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                                             -> (MW ExplicitArg {arg:826} : IVar Prelude.Types.Nat)
                                             -> (MW ExplicitArg {arg:829} : IVar Prelude.Types.Nat)
                                             -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                                                     $ (IApp. IVar DerivedGen.LT2
                                                            $ IVar {arg:826}
                                                            $ IVar {arg:829}))))
                            IDef {cons_gen_for_DerivedGen.Base:7}
                                 [ PatClause (IApp. IVar {cons_gen_for_DerivedGen.Base:7}
                                                  $ IBindVar ^cons_fuel^
                                                  $ IBindVar x
                                                  $ (IApp. IVar Prelude.Types.S
                                                         $ (IApp. IVar Prelude.Types.S
                                                                $ IBindVar to_be_deceqed^^x0)))
                                             (ICase (IApp. IVar Decidable.Equality.decEq
                                                         $ IVar x
                                                         $ IVar to_be_deceqed^^x0)
                                                    (Implicit False)
                                                    [ PatClause (IApp. IVar Prelude.No
                                                                     $ Implicit True)
                                                                (IVar Prelude.empty)
                                                    , PatClause (IApp. IVar Prelude.Yes
                                                                     $ IVar Builtin.Refl)
                                                                (IApp. IVar Test.DepTyCheck.Gen.oneOf'
                                                                     $ (IApp. IVar ::
                                                                            $ (IApp. (INamedApp. IVar Prelude.pure
                                                                                               $ IVar Test.DepTyCheck.Gen.Gen)
                                                                                   $ (INamedApp. IVar DerivedGen.Base
                                                                                               $ IVar x))
                                                                            $ IVar Nil)) ])
                                 , PatClause (IApp. IVar {cons_gen_for_DerivedGen.Base:7}
                                                  $ Implicit True
                                                  $ Implicit True
                                                  $ Implicit True)
                                             (IVar empty) ]
                            IDef {cons_gen_for_DerivedGen.Step:7}
                                 [ PatClause (IApp. IVar {cons_gen_for_DerivedGen.Step:7}
                                                  $ IBindVar ^cons_fuel^
                                                  $ IBindVar x
                                                  $ (IApp. IVar Prelude.Types.S
                                                         $ IBindVar y))
                                             (IApp. IVar Test.DepTyCheck.Gen.oneOf'
                                                  $ (IApp. IVar ::
                                                         $ (IApp. IVar >>=
                                                                $ (IApp. IVar <DerivedGen.LT2>[0, 1]
                                                                       $ IVar ^cons_fuel^
                                                                       $ IVar x
                                                                       $ IVar y)
                                                                $ (ILam.  (MW ExplicitArg {lamc:0} : Implicit False)
                                                                       => ICase (IVar {lamc:0})
                                                                                (Implicit False)
                                                                                [ PatClause (IBindVar ^bnd^{arg:837})
                                                                                            (IApp. (INamedApp. IVar Prelude.pure
                                                                                                             $ IVar Test.DepTyCheck.Gen.Gen)
                                                                                                 $ (IApp. (INamedApp. IVar DerivedGen.Step
                                                                                                                    $ IVar y
                                                                                                                    $ IVar x)
                                                                                                        $ IVar ^bnd^{arg:837})) ]))
                                                         $ IVar Nil))
                                 , PatClause (IApp. IVar {cons_gen_for_DerivedGen.Step:7}
                                                  $ Implicit True
                                                  $ Implicit True
                                                  $ Implicit True)
                                             (IVar empty) ] ]
