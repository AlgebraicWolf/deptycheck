1/2: Building AlternativeCore (AlternativeCore.idr)
2/2: Building DerivedGen (DerivedGen.idr)
LOG gen.auto.derive.infra:0: 
ILocal (ILam.  (MW ExplicitArg {fuel:1199} : IVar Data.Fuel.Fuel)
            => (MW ExplicitArg n : IVar Prelude.Types.Nat)
            => (MW ExplicitArg a : IType)
            => (IApp. IVar {("Data.Vect.Vect", [0, 1]):0}
                    $ IVar {fuel:1199}
                    $ IVar n
                    $ IVar a))
  IClaim MW
         Export
         []
         (MkTy {("Data.Vect.Vect", [0, 1]):0}
               (IPi.  (MW ExplicitArg : IVar Data.Fuel.Fuel)
                   -> (MW ExplicitArg len : IVar Prelude.Types.Nat)
                   -> (MW ExplicitArg elem : IType)
                   -> (IApp. IVar Test.DepTyCheck.Gen.Gen
                           $ (IApp. IVar Data.Vect.Vect
                                  $ IVar len
                                  $ IVar elem))))
  IDef {("Data.Vect.Vect", [0, 1]):0}
       [ PatClause (IApp. IVar {("Data.Vect.Vect", [0, 1]):0}
                        $ IVar Dry
                        $ Implicit True
                        $ Implicit True)
                   (IVar empty)
       , PatClause (IApp. IVar {("Data.Vect.Vect", [0, 1]):0}
                        $ (IApp. IVar More $ IBindVar fuel)
                        $ IBindVar 0
                        $ IBindVar 1)
                   (IApp. IVar {("Data.Vect.Vect", [0, 1]):0}
                        $ IVar fuel
                        $ IVar 0
                        $ IVar 1) ]
